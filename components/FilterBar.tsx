"use client";export type Category='ACP'|'WPC'|'CNC'|'Acoustic';type Props={categories:Category[];selected:Category[];onCategory:(c:Category[])=>void;search:string;onSearch:(s:string)=>void;sort:'price-asc'|'price-desc'|'name-asc';onSort:(s:'price-asc'|'price-desc'|'name-asc')=>void;priceRange:[number,number];setPriceRange:(r:[number,number])=>void;minPrice?:number;maxPrice:number;step?:number;};export default function FilterBar({categories,selected,onCategory,search,onSearch,sort,onSort,priceRange,setPriceRange,minPrice=0,maxPrice,step=1000}:Props){const allChecked=categories.length===selected.length;const [minVal,maxVal]=priceRange;const clampMin=(v:number)=>Math.min(Math.max(v,minPrice),maxVal);const clampMax=(v:number)=>Math.max(Math.min(v,maxPrice),minVal);const leftPct=((minVal-minPrice)/(maxPrice-minPrice))*100;const rightPct=100-((maxVal-minPrice)/(maxPrice-minPrice))*100;return(<div className='card flex flex-col gap-4 md:gap-3'><div className='flex flex-wrap gap-3'><label className='flex items-center gap-1'><input type='checkbox' checked={allChecked} onChange={()=>onCategory(allChecked?[]:[...categories])}/><span className='text-sm'>All</span></label>{categories.map(c=>(<label key={c} className='flex items-center gap-1'><input type='checkbox' checked={selected.includes(c)} onChange={e=>{if(e.target.checked)onCategory([...selected,c]);else onCategory(selected.filter(s=>s!==c));}}/><span className='text-sm'>{c}</span></label>))}</div><div className='flex flex-col gap-2 md:flex-row md:items-center md:justify-between'><input value={search} onChange={e=>onSearch(e.target.value)} placeholder='Search products...' className='rounded-xl px-3 py-2 bg-[#111] border border-white/15 text-sm w-full md:max-w-sm'/><select value={sort} onChange={e=>onSort(e.target.value as any)} className='rounded-xl px-3 py-2 bg-[#111] border border-white/15 text-sm'><option value='price-asc'>Price: Low → High</option><option value='price-desc'>Price: High → Low</option><option value='name-asc'>Name: A → Z</option></select></div><div className='grid gap-2'><div className='text-sm'>Price: <span className='font-semibold'>₦{minVal.toLocaleString()}</span> – <span className='font-semibold'>₦{maxVal.toLocaleString()}</span></div><div className='relative h-8'><div className='absolute top-1/2 -translate-y-1/2 left-0 right-0 h-1.5 rounded-full bg-white/10'/><div className='absolute top-1/2 -translate-y-1/2 h-1.5 rounded-full' style={{left:`${leftPct}%`, right:`${rightPct}%`, background:'#D4AF37'}}/><input type='range' min={minPrice} max={maxPrice} step={step} value={minVal} onChange={e=>{const v=clampMin(parseInt(e.target.value||'0',10)); setPriceRange([isNaN(v)?minPrice:v,maxVal]);}} className='range-thumb absolute inset-0 w-full appearance-none bg-transparent pointer-events-auto'/><input type='range' min={minPrice} max={maxPrice} step={step} value={maxVal} onChange={e=>{const v=clampMax(parseInt(e.target.value||'0',10)); setPriceRange([minVal,isNaN(v)?maxPrice:v]);}} className='range-thumb absolute inset-0 w-full appearance-none bg-transparent pointer-events-auto'/></div><div className='flex gap-2'><input type='number' min={minPrice} max={maxVal} step={step} value={minVal} onChange={e=>{const v=clampMin(parseInt(e.target.value||'0',10)); setPriceRange([isNaN(v)?minPrice:v,maxVal]);}} className='rounded-xl px-3 py-2 bg-[#111] border border-white/15 text-sm w-40'/><input type='number' min={minVal} max={maxPrice} step={step} value={maxVal} onChange={e=>{const v=clampMax(parseInt(e.target.value||'0',10)); setPriceRange([minVal,isNaN(v)?maxPrice:v]);}} className='rounded-xl px-3 py-2 bg-[#111] border border-white/15 text-sm w-40'/></div></div><style jsx>{`.range-thumb {-webkit-appearance:none;appearance:none;height:8px;outline:none;pointer-events:none;} .range-thumb::-webkit-slider-thumb {-webkit-appearance:none;appearance:none;pointer-events:auto;height:18px;width:18px;border-radius:9999px;background:#d4af37;border:2px solid #222222;} .range-thumb::-moz-range-thumb {pointer-events:auto;height:18px;width:18px;border-radius:9999px;background:#d4af37;border:2px solid #222222;}`}</style></div>)}